{{ template "base" . }}

{{ define "title" }}{{ .Player.Name }}{{ end }}
{{ define "content" }}
  <div class="border-b border-gray-200 px-6 py-4 dark:border-gray-700">
    <h1 class="text-center text-4xl font-bold text-gray-900 dark:text-white">
      {{ .Player.Name }}
    </h1>
  </div>
  <div>
    <h3 class="my-4 text-2xl font-bold text-gray-900 dark:text-white">Events</h3>
    <div class="flex flex-wrap gap-4">
      {{ $eventBoxes := slice
        (slice "Attended" "calendar_check" .Player.AttendedEvents)
        (slice "Undefeated" "trophy" .Player.UndefeatedEvents)
        (slice "Unfinished" "sentiment_very_dissatisfied" .Player.UnfinishedEvents)
      }}
      {{ range $eventBox := $eventBoxes }}
        {{ $title := index . 0 }}
        {{ $icon := index . 1 }}
        {{ $value := index . 2 }}
        <div class="w-40 rounded-lg border border-gray-200 bg-white shadow md:w-48 dark:border-gray-700 dark:bg-gray-800">
          <div class="p-6">
            <h5 class="mb-3 truncate text-lg font-semibold text-gray-900 dark:text-white">
              {{ $title }}
            </h5>
            <div class="flex items-center gap-4">
              <div class="flex">
                <span class="{{ $.Scheme.SymbolPrimary }}">
                  {{ $icon }}
                </span>
              </div>
              <div class="flex">
                <p class="text-xl font-bold text-gray-900 dark:text-white">
                  {{ $value }}
                </p>
              </div>
            </div>
          </div>
        </div>
      {{ end }}
    </div>
  </div>
  <hr class="my-4 border-gray-200 dark:border-gray-700" />
  <div class="grid grid-cols-1 gap-6 md:grid-cols-2">
    <div>
      <div class="mb-4 rounded-lg border border-gray-200 bg-white shadow dark:border-gray-700 dark:bg-gray-800">
        <div class="p-6">
          <table class="min-w-full">
            <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
              <tr>
                <td class="py-2 text-gray-500 dark:text-gray-400">Elo Rating:</td>
                <td class="py-2 text-gray-500 dark:text-gray-400">
                  {{ .Player.EloRating }}
                </td>
              </tr>
              <tr>
                <td class="py-2 text-gray-500 dark:text-gray-400">Glicko2 Rating:</td>
                <td class="py-2 text-gray-500 dark:text-gray-400">
                  {{ printf "%.2f" .Player.GlickoRating.Mu }}
                </td>
              </tr>
              <tr>
                <td class="py-2 text-gray-500 dark:text-gray-400">Glicko2 Distribution:</td>
                <td class="py-2 text-gray-500 dark:text-gray-400">
                  {{ printf "%.2f" .Player.GlickoRating.Phi }}
                </td>
              </tr>
              <tr>
                <td class="py-2 text-gray-500 dark:text-gray-400">Glicko2 Volatility:</td>
                <td class="py-2 text-gray-500 dark:text-gray-400">
                  {{ printf "%.2f"
                    .Player.GlickoRating.Sigma
                  }}
                </td>
              </tr>
              <tr>
                <td class="py-2 text-gray-500 dark:text-gray-400">Amount of Draws:</td>
                <td class="py-2 text-gray-500 dark:text-gray-400">
                  {{ .Player.DrawCounter }}
                </td>
              </tr>
              <tr>
                <td class="py-2 text-gray-500 dark:text-gray-400">Game Win Rate:</td>
                <td class="py-2 text-gray-500 dark:text-gray-400">{{ printf "%.2f" .Player.GameWinRate }}%</td>
              </tr>
              <tr>
                <td class="py-2 text-gray-500 dark:text-gray-400">Match Win Rate:</td>
                <td class="py-2 text-gray-500 dark:text-gray-400">{{ printf "%.2f" .Player.MatchWinRate }}%</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
    <div>
      <div class="mb-4 rounded-lg border border-gray-200 bg-white shadow dark:border-gray-700 dark:bg-gray-800">
        <div class="p-6">
          <h4 class="mb-4 text-lg font-semibold text-gray-900 dark:text-white">Matches Won Against</h4>
          {{ if eq (len .Player.WonAgainst) 0 }}
            <p class="text-gray-500 dark:text-gray-400">No matches won against any opponent yet.</p>
          {{ else }}
            <div class="max-h-50 overflow-y-auto">
              <table class="min-w-full">
                <tbody>
                  {{ range .Player.WonAgainst }}
                    <tr>
                      <td class="text-gray-500 dark:text-gray-400">
                        {{ .Opponent }}
                      </td>
                      <td class="text-right text-gray-500 dark:text-gray-400 pr-4">
                        {{ .Count }}
                      </td>
                    </tr>
                  {{ end }}
                </tbody>
              </table>
            </div>
          {{ end }}
        </div>
      </div>
      <div class="mb-4 rounded-lg border border-gray-200 bg-white shadow dark:border-gray-700 dark:bg-gray-800">
        <div class="p-6">
          <h4 class="mb-4 text-lg font-semibold text-gray-900 dark:text-white">Matches Lost Against</h4>
          {{ if eq (len .Player.LostAgainst) 0 }}
            <p class="text-gray-500 dark:text-gray-400">Undefeated! ðŸ’ª</p>
          {{ else }}
            <div class="max-h-50 overflow-y-auto">
              <table class="min-w-full">
                <tbody>
                  {{ range .Player.LostAgainst }}
                    <tr>
                      <td class="text-gray-500 dark:text-gray-400">
                        {{ .Opponent }}
                      </td>
                      <td class="text-right text-gray-500 dark:text-gray-400 pr-4">
                        {{ .Count }}
                      </td>
                    </tr>
                  {{ end }}
                </tbody>
              </table>
            </div>
          {{ end }}
        </div>
      </div>
    </div>
    <div>
      <canvas id="myChart">Your browser does not support the canvas element.</canvas>
    </div>
  </div>
  <div class="mt-8 flex justify-center">
    <button class="{{ .Scheme.ButtonBack }}" onclick="history.back()">Go Back</button>
  </div>
{{ end }}

{{ define "post-script" }}
  <script>
    const ctx = document.getElementById('myChart');

    const cssVar = (name) => {
      return getComputedStyle(document.documentElement).getPropertyValue(name);
    };

    const darkMode = document.documentElement.classList.contains("dark");
    let backgroundColor = cssVar('--color-{{ .Scheme.Primary }}');
    if (darkMode) {
      backgroundColor = cssVar('--color-{{ .Scheme.PrimaryDark }}');
    }

    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
        datasets: [
          {
            label: '# of Votes',
            data: [12, 19, 3, 5, 2, 3],
            borderWidth: 0,
            backgroundColor: backgroundColor,
          },
        ],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
          },
        },
      },
    });
  </script>
{{ end }}
